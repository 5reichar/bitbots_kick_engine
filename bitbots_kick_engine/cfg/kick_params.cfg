#! /usr/bin/env python

PACKAGE = 'bitbots_kick_engine'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
kick_enum = gen.enum([ gen.const("enum_default",       int_t, 0, "Default Kick"),
                       gen.const("enum_beziercurve",   int_t, 1, "Beziercurve Kick"),
                       gen.const("enum_linear_spline", int_t, 2, "Linear Spline Kick"),
                       gen.const("enum_cubic_spline",  int_t, 3, "Cubic Spline Kick"),
                       gen.const("enum_smooth_spline", int_t, 4, "Smooth Spline Kick")],
                     "An enum to state wich kick preparation position shall be used")

default_kick = gen.add_group("default kick",  type="tab")
default_kick.add("default_kick_use_kick_enum", int_t, 0, "The Kick preparation Position that should used via an enum", 4, 0, 4, edit_method=kick_enum)

beziercurve_kick = gen.add_group("beziercurve kick",  type="tab")
beziercurve_kick.add("beziercurve_kick_enum", int_t, 0, "The Kick identification enum", 1, 0, 4, edit_method=kick_enum)
beziercurve_kick.add("beziercurve_kick_active",   bool_t,   0, "Parameter that shows if this kick shall be used",  False)
beziercurve_kick.add("beziercurve_kick_angle_requirement_min_robot_ball", double_t, 0, "The minimum angle between the robot and the ball to use this kick", 0, 0, 360)
beziercurve_kick.add("beziercurve_kick_angle_requirement_max_robot_ball", double_t, 0, "The maximum angle between the robot and the ball to use this kick", 0, 0, 360)
beziercurve_kick.add("beziercurve_kick_angle_requirement_min_ball_goal",  double_t, 0, "The minimum angle between the ball and the goal to use this kick",  0, 0, 360)
beziercurve_kick.add("beziercurve_kick_angle_requirement_max_ball_goal",  double_t, 0, "The maximum angle between the ball and the goal to use this kick",  0, 0, 360)

linear_spline_kick = gen.add_group("linear spline kick",  type="tab")
linear_spline_kick.add("linear_spline_kick_enum", int_t, 0, "The Kick identification enum", 1, 0, 4, edit_method=kick_enum)
linear_spline_kick.add("linear_spline_kick_active",   bool_t,   0, "Parameter that shows if this kick shall be used",  False)
linear_spline_kick.add("linear_spline_kick_angle_requirement_min_robot_ball", double_t, 0, "The minimum angle between the robot and the ball to use this kick", 0, 0, 360)
linear_spline_kick.add("linear_spline_kick_angle_requirement_max_robot_ball", double_t, 0, "The maximum angle between the robot and the ball to use this kick", 0, 0, 360)
linear_spline_kick.add("linear_spline_kick_angle_requirement_min_ball_goal",  double_t, 0, "The minimum angle between the ball and the goal to use this kick",  0, 0, 360)
linear_spline_kick.add("linear_spline_kick_angle_requirement_max_ball_goal",  double_t, 0, "The maximum angle between the ball and the goal to use this kick",  0, 0, 360)

cubic_spline_kick = gen.add_group("cubic spline kick",  type="tab")
cubic_spline_kick.add("cubic_spline_kick_enum", int_t, 0, "The Kick identification enum", 1, 0, 4, edit_method=kick_enum)
cubic_spline_kick.add("cubic_spline_kick_active",   bool_t,   0, "Parameter that shows if this kick shall be used",  False)
cubic_spline_kick.add("cubic_spline_kick_angle_requirement_min_robot_ball", double_t, 0, "The minimum angle between the robot and the ball to use this kick", 0, 0, 360)
cubic_spline_kick.add("cubic_spline_kick_angle_requirement_max_robot_ball", double_t, 0, "The maximum angle between the robot and the ball to use this kick", 0, 0, 360)
cubic_spline_kick.add("cubic_spline_kick_angle_requirement_min_ball_goal",  double_t, 0, "The minimum angle between the ball and the goal to use this kick",  0, 0, 360)
cubic_spline_kick.add("cubic_spline_kick_angle_requirement_max_ball_goal",  double_t, 0, "The maximum angle between the ball and the goal to use this kick",  0, 0, 360)

smooth_spline_kick = gen.add_group("smooth spline kick",  type="tab")
smooth_spline_kick.add("smooth_spline_kick_enum", int_t, 0, "The Kick identification enum", 1, 0, 4, edit_method=kick_enum)
smooth_spline_kick.add("smooth_spline_kick_active",   bool_t,   0, "Parameter that shows if this kick shall be used",  False)
smooth_spline_kick.add("smooth_spline_kick_angle_requirement_min_robot_ball", double_t, 0, "The minimum angle between the robot and the ball to use this kick", 0, 0, 360)
smooth_spline_kick.add("smooth_spline_kick_angle_requirement_max_robot_ball", double_t, 0, "The maximum angle between the robot and the ball to use this kick", 0, 0, 360)
smooth_spline_kick.add("smooth_spline_kick_angle_requirement_min_ball_goal",  double_t, 0, "The minimum angle between the ball and the goal to use this kick",  0, 0, 360)
smooth_spline_kick.add("smooth_spline_kick_angle_requirement_max_ball_goal",  double_t, 0, "The maximum angle between the ball and the goal to use this kick",  0, 0, 360)

exit(gen.generate(PACKAGE, "bitbots_kick_engine", "kick_params"))