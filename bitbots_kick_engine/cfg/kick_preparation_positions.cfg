#! /usr/bin/env python

PACKAGE = 'bitbots_kick_engine'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#  Definition: .add(Name, Type, Level, Description, Default, Min, Max)
default_position = gen.add_group("default position",  type="tab")
default_position.add("default_position_x", double_t, 0, "The x-position for the default kick preparation position", 0)
default_position.add("default_position_y", double_t, 0, "The y-position for the default kick preparation position", 0)
default_position.add("default_position_z", double_t, 0, "The z-position for the default kick preparation position", 0)

straight_front_position = gen.add_group("straight front position",  type="tab")
straight_front_position.add("straight_front_position_x", double_t, 0, "The x-position for the straight front kick preparation position", 0)
straight_front_position.add("straight_front_position_y", double_t, 0, "The y-position for the straight front kick preparation position", 10)
straight_front_position.add("straight_front_position_z", double_t, 0, "The z-position for the straight front kick preparation position", 5)

straight_back_position = gen.add_group("straight back position",  type="tab")
straight_back_position.add("straight_back_position_x", double_t, 0, "The x-position for the straight back kick preparation position", 0)
straight_back_position.add("straight_back_position_y", double_t, 0, "The y-position for the straight back kick preparation position", -10)
straight_back_position.add("straight_back_position_z", double_t, 0, "The z-position for the straight back kick preparation position", 10)

straight_left_position = gen.add_group("straight left position",  type="tab")
straight_left_position.add("straight_left_position_x", double_t, 0, "The x-position for the straight left kick preparation position", -10)
straight_left_position.add("straight_left_position_y", double_t, 0, "The y-position for the straight left kick preparation position", 0)
straight_left_position.add("straight_left_position_z", double_t, 0, "The z-position for the straight left kick preparation position", 10)

straight_right_position = gen.add_group("straight right position",  type="tab")
straight_right_position.add("straight_right_position_x", double_t, 0, "The x-position for the straight right kick preparation position", 10)
straight_right_position.add("straight_right_position_y", double_t, 0, "The y-position for the straight right kick preparation position", 0)
straight_right_position.add("straight_right_position_z", double_t, 0, "The z-position for the straight right kick preparation position", -10)

side_front_left_position = gen.add_group("side front left position",  type="tab")
side_front_left_position.add("side_front_left_position_x", double_t, 0, "The x-position for the side front left kick preparation position", -5)
side_front_left_position.add("side_front_left_position_y", double_t, 0, "The y-position for the side front left kick preparation position", 5)
side_front_left_position.add("side_front_left_position_z", double_t, 0, "The z-position for the side front left kick preparation position", 0)

side_front_right_position = gen.add_group("side front right position",  type="tab")
side_front_right_position.add("side_front_right_position_x", double_t, 0, "The x-position for the side front right kick preparation position", 5)
side_front_right_position.add("side_front_right_position_y", double_t, 0, "The y-position for the side front right kick preparation position", -5)
side_front_right_position.add("side_front_right_position_z", double_t, 0, "The z-position for the side front right kick preparation position", 0)

side_back_left_position = gen.add_group("side back left position",  type="tab")
side_back_left_position.add("side_back_left_position_x", double_t, 0, "The x-position for the side back left kick preparation position", -5)
side_back_left_position.add("side_back_left_position_y", double_t, 0, "The y-position for the side back left kick preparation position", -5)
side_back_left_position.add("side_back_left_position_z", double_t, 0, "The z-position for the side back left kick preparation position", 0)

side_back_right_position = gen.add_group("side back right position",  type="tab")
side_back_right_position.add("side_back_right_position_x", double_t, 0, "The x-position for the side back right kick preparation position", 5)
side_back_right_position.add("side_back_right_position_y", double_t, 0, "The y-position for the side back right kick preparation position", 5)
side_back_right_position.add("side_back_right_position_z", double_t, 0, "The z-position for the side back right kick preparation position", 0)


kick_preparation_enum = gen.enum([ gen.const("enum_default",          int_t, 0, "Default Kick Preparation Position"),
                                   gen.const("enum_straight_front",   int_t, 1, "Straight Fron Kick Preparation Position"),
                                   gen.const("enum_straight_back",    int_t, 2, "Straight Back Kick Preparation Position"),
                                   gen.const("enum_straight_left",    int_t, 3, "Straight Left Kick Preparation Position"),
                                   gen.const("enum_straight_right",   int_t, 4, "Straight Right Kick Preparation Position"),
                                   gen.const("enum_side_front_left",  int_t, 5, "Side Front Left Kick Preparation Position"),
                                   gen.const("enum_side_front_right", int_t, 6, "Side Front Right Kick Preparation Position"),
                                   gen.const("enum_side_back_left",   int_t, 7, "Side Back Left Kick Preparation Position"),
                                   gen.const("enum_side_back_right",  int_t, 8, "Side Back Right Kick Preparation Position")],
                                 "An enum to state wich kick preparation position shall be used")

#  Definition: .add(Name, Type, Level, Description, Default, Min, Max)

robot_sector_1 = gen.add_group("robot sector 1",  type="tab")
robot_sector_1.add("robot_sector_1_angle_min", double_t, 0, "The minimum angle for this sector with the robot in the center", 315, 0, 360)
robot_sector_1.add("robot_sector_1_angle_max", double_t, 0, "The maximum angle for this sector with the robot in the center", 45, 0, 360)

rs1_ball_sector_1 = robot_sector_1.add_group("rs1 ball sector 1",  type="tab")
rs1_ball_sector_1.add("rs1_ball_sector_1_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 315, 0, 360)
rs1_ball_sector_1.add("rs1_ball_sector_1_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 45, 0, 360)
rs1_ball_sector_1.add("rs1_ball_sector_1_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 1, 0, 8, edit_method=kick_preparation_enum)

rs1_ball_sector_2 = robot_sector_1.add_group("rs1 ball sector 2",  type="tab")
rs1_ball_sector_2.add("rs1_ball_sector_2_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 45, 0, 360)
rs1_ball_sector_2.add("rs1_ball_sector_2_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 135, 0, 360)
rs1_ball_sector_2.add("rs1_ball_sector_2_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 5, 0, 8, edit_method=kick_preparation_enum)

rs1_ball_sector_3 = robot_sector_1.add_group("rs1 ball sector 3",  type="tab")
rs1_ball_sector_3.add("rs1_ball_sector_3_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 135, 0, 360)
rs1_ball_sector_3.add("rs1_ball_sector_3_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 225, 0, 360)
rs1_ball_sector_3.add("rs1_ball_sector_3_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 2, 0, 8, edit_method=kick_preparation_enum)

rs1_ball_sector_4 = robot_sector_1.add_group("rs1 ball sector 4",  type="tab")
rs1_ball_sector_4.add("rs1_ball_sector_4_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 225, 0, 360)
rs1_ball_sector_4.add("rs1_ball_sector_4_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 315, 0, 360)
rs1_ball_sector_4.add("rs1_ball_sector_4_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 6, 0, 8, edit_method=kick_preparation_enum)



robot_sector_2 = gen.add_group("robot sector 2",  type="tab")
robot_sector_2.add("robot_sector_2_angle_min", double_t, 0, "The minimum angle for sector 2 with the robot in the center", 45, 0, 360)
robot_sector_2.add("robot_sector_2_angle_max", double_t, 0, "The maximum angle for sector 2 with the robot in the center", 135, 0, 360)

rs2_ball_sector_1 = robot_sector_2.add_group("rs2 ball sector 1",  type="tab")
rs2_ball_sector_1.add("rs2_ball_sector_1_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 315, 0, 360)
rs2_ball_sector_1.add("rs2_ball_sector_1_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 45, 0, 360)
rs2_ball_sector_1.add("rs2_ball_sector_1_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 8, 0, 8, edit_method=kick_preparation_enum)

rs2_ball_sector_2 = robot_sector_2.add_group("rs2 ball sector 2",  type="tab")
rs2_ball_sector_2.add("rs2_ball_sector_2_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 45, 0, 360)
rs2_ball_sector_2.add("rs2_ball_sector_2_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 135, 0, 360)
rs2_ball_sector_2.add("rs2_ball_sector_2_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 0, 0, 8, edit_method=kick_preparation_enum)

rs2_ball_sector_3 = robot_sector_2.add_group("rs2 ball sector 3",  type="tab")
rs2_ball_sector_3.add("rs2_ball_sector_3_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 135, 0, 360)
rs2_ball_sector_3.add("rs2_ball_sector_3_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 225, 0, 360)
rs2_ball_sector_3.add("rs2_ball_sector_3_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 5, 0, 8, edit_method=kick_preparation_enum)

rs2_ball_sector_4 = robot_sector_2.add_group("rs2 ball sector 4",  type="tab")
rs2_ball_sector_4.add("rs2_ball_sector_4_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 225, 0, 360)
rs2_ball_sector_4.add("rs2_ball_sector_4_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 315, 0, 360)
rs2_ball_sector_4.add("rs2_ball_sector_4_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 4, 0, 8, edit_method=kick_preparation_enum)



robot_sector_3 = gen.add_group("robot sector 3",  type="tab")
robot_sector_3.add("robot_sector_3_angle_min", double_t, 0, "The minimum angle for sector 3 with the robot in the center", 135, 0, 360)
robot_sector_3.add("robot_sector_3_angle_max", double_t, 0, "The maximum angle for sector 3 with the robot in the center", 225, 0, 360)

rs3_ball_sector_1 = robot_sector_3.add_group("rs3 ball sector 1",  type="tab")
rs3_ball_sector_1.add("rs3_ball_sector_1_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 315, 0, 360)
rs3_ball_sector_1.add("rs3_ball_sector_1_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 45, 0, 360)
rs3_ball_sector_1.add("rs3_ball_sector_1_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 2, 0, 8, edit_method=kick_preparation_enum)

rs3_ball_sector_2 = robot_sector_3.add_group("rs3 ball sector 2",  type="tab")
rs3_ball_sector_2.add("rs3_ball_sector_2_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 45, 0, 360)
rs3_ball_sector_2.add("rs3_ball_sector_2_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 135, 0, 360)
rs3_ball_sector_2.add("rs3_ball_sector_2_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 7, 0, 8, edit_method=kick_preparation_enum)

rs3_ball_sector_3 = robot_sector_3.add_group("rs3 ball sector 3",  type="tab")
rs3_ball_sector_3.add("rs3_ball_sector_3_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 135, 0, 360)
rs3_ball_sector_3.add("rs3_ball_sector_3_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 225, 0, 360)
rs3_ball_sector_3.add("rs3_ball_sector_3_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 1, 0, 8, edit_method=kick_preparation_enum)

rs3_ball_sector_4 = robot_sector_3.add_group("rs3 ball sector 4",  type="tab")
rs3_ball_sector_4.add("rs3_ball_sector_4_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 225, 0, 360)
rs3_ball_sector_4.add("rs3_ball_sector_4_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 315, 0, 360)
rs3_ball_sector_4.add("rs3_ball_sector_4_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 8, 0, 8, edit_method=kick_preparation_enum)



robot_sector_4 = gen.add_group("robot sector 4",  type="tab")
robot_sector_4.add("robot_sector_4_angle_min", double_t, 0, "The minimum angle for sector 4 with the robot in the center", 225, 0, 360)
robot_sector_4.add("robot_sector_4_angle_max", double_t, 0, "The maximum angle for sector 4 with the robot in the center", 315, 0, 360)

rs4_ball_sector_1 = robot_sector_4.add_group("rs4 ball sector 1",  type="tab")
rs4_ball_sector_1.add("rs4_ball_sector_1_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 315, 0, 360)
rs4_ball_sector_1.add("rs4_ball_sector_1_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 45, 0, 360)
rs4_ball_sector_1.add("rs4_ball_sector_1_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 7, 0, 8, edit_method=kick_preparation_enum)

rs4_ball_sector_2 = robot_sector_4.add_group("rs4 ball sector 2",  type="tab")
rs4_ball_sector_2.add("rs4_ball_sector_2_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 45, 0, 360)
rs4_ball_sector_2.add("rs4_ball_sector_2_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 135, 0, 360)
rs4_ball_sector_2.add("rs4_ball_sector_2_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 3, 0, 8, edit_method=kick_preparation_enum)

rs4_ball_sector_3 = robot_sector_4.add_group("rs4 ball sector 3",  type="tab")
rs4_ball_sector_3.add("rs4_ball_sector_3_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 135, 0, 360)
rs4_ball_sector_3.add("rs4_ball_sector_3_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 225, 0, 360)
rs4_ball_sector_3.add("rs4_ball_sector_3_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 5, 0, 8, edit_method=kick_preparation_enum)

rs4_ball_sector_4 = robot_sector_4.add_group("rs4 ball sector 4",  type="tab")
rs4_ball_sector_4.add("rs4_ball_sector_4_angle_min", double_t, 0, "The minimum angle for this sector with the ball in the center", 225, 0, 360)
rs4_ball_sector_4.add("rs4_ball_sector_4_angle_max", double_t, 0, "The maximum angle for this sector with the ball in the center", 315, 0, 360)
rs4_ball_sector_4.add("rs4_ball_sector_4_use_kp_position", int_t, 0, "The Kick preparation Position that should used via an enum", 0, 0, 8, edit_method=kick_preparation_enum)

exit(gen.generate(PACKAGE, "bitbots_kick_engine", "kick_preparation_positions"))