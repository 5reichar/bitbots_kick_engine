#! /usr/bin/env python

PACKAGE = 'bitbots_throw'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
group_engine = gen.add_group("throw_engine", type="tab")
group_robot_data = gen.add_group("robot_and_world_data", type="tab")
group_node = gen.add_group("throw_default_values", type="tab")

#       Name       Type      Level    Description     Default Min   Max

# Throw Node
group_node.add("debug_active", bool_t, 1, "actviate debug", False)
group_node.add("engine_frequency", double_t, 1, "Max frequency of engine update rate [hz]", 400.0, min=1, max=1000)
group_node.add("odom_pub_factor", int_t, 1, "Publish odom every [int] update of the engine", 1, min=1, max=1000)
group_node.add("bio_ik_time", double_t, 1, "Timeout time for bioIK [s]", 0.01, min=0, max=0.05)

# Robot Data
group_robot_data.add("frequency", double_t, 1, "Full movement cycle frequency (in Hz, > 0)", 5.0, min=0.1, max=5.0)
group_robot_data.add("hand_distance", double_t, 1, "Lateral distance between the hand and the center of the robot (in m, >= 0)", 0.5, min=0.1, max=2.0)
group_robot_data.add("robot_height", double_t, 1, "The height of the robot", 2.0, min=0.1, max=2.0)
group_robot_data.add("head_collision_security_radius", double_t, 1, "The radius that objects should enter to prevent collisions with the head of the robot", 0.5, min=0.1, max=2.0)
group_robot_data.add("arm_length", double_t, 1, "The length of the arms of the robot", 1.0, min=0.1, max=2.0)
group_robot_data.add("max_throw_velocity", double_t, 1, "The maximal velocity the robot can throw (in m, >= 0)", 100.0, min=0.1, max=100.0)
group_robot_data.add("ball_radius", double_t, 1, "The radius of the ball that should be thrown", 0.4, min=0.1, max=2.0)

# Throw Engine
group_engine.add("throw_strength", double_t, 1, "How many percent of the max_throw_velocity shall be used if possible", 0.5, min=0.1, max=1)
group_engine.add("pick_up_ball_duration_share", double_t, 1, "The share of the movement cycle dedicated to picking up the ball", 0.25, min=0, max=1)
group_engine.add("throw_preparation_duration_share", double_t, 1, "The share of the movement cycle dedicated to prepare the throwing the ball", 0.25, min=0, max=1)
group_engine.add("throw_duration_share", double_t, 1, "The share of the movement cycle dedicated to throwing the ball", 0.25, min=0, max=1)
group_engine.add("throw_conclusion_duration_share", double_t, 1, "The share of the movement cycle dedicated to motion after throwing the ball", 0.25, min=0, max=1)
group_engine.add("throw_angle", double_t, 1, "The Angle at which the ball shall thrown", 30, min=0, max=360)

exit(gen.generate(PACKAGE, "bitbots_throw", "throw_engine_params"))
