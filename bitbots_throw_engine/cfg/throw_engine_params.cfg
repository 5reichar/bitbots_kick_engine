#! /usr/bin/env python

PACKAGE = 'bitbots_throw'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
group_engine = gen.add_group("throw engine", type="tab")
group_node = gen.add_group("throw node", type="tab")

#       Name       Type      Level    Description     Default Min   Max

# Throw Engine
group_engine.add("frequency", double_t, 1, "Full movement cycle frequency (in Hz, > 0)", min=0.1, max=5)
group_engine.add("hand_distance", double_t, 1, "Lateral distance between the hand and the center of the robot (in m, >= 0)", min=0, max=1)
group_engine.add("max_throw_distance", double_t, 1, "The maximal distance the robot can throw (in m, >= 0)", min=0)

group_engine.add("throw_starting_position_x", double_t, 1, "The X position from which the throw shall be started", 0)
group_engine.add("throw_starting_position_y", double_t, 1, "The Y position from which the throw shall be started", 0)
group_engine.add("throw_starting_position_z", double_t, 1, "The Z position from which the throw shall be started", 0)

group_engine.add("throw_release_position_x", double_t, 1, "The X position from which the ball shall be released", 0)
group_engine.add("throw_release_position_y", double_t, 1, "The Y position from which the ball shall be released", 0)
group_engine.add("throw_release_position_z", double_t, 1, "The Z position from which the ball shall be released", 0)

group_engine.add("pick_up_ball_duration_share", double_t, 0, "The share of the movement cycle dedicated to picking up the ball", 0, min=0, max=1)
group_engine.add("throw_preparation_duration_share", double_t, 0, "The share of the movement cycle dedicated to prepare the throwing the ball", 0, min=0, max=1)
group_engine.add("throw_duration_share", double_t, 0, "The share of the movement cycle dedicated to throwing the ball", 0, min=0, max=1)
group_engine.add("throw_conclusion_duration_share", double_t, 0, "The share of the movement cycle dedicated to motion after throwing the ball", 0, min=0, max=1)
group_engine.add("throw_angle", double_t, 0, "The Angle at which the ball shall thrown", 30, min=0, max=359)

# Throw Node
group_node.add("debug_active", bool_t, 1, "actviate debug")
group_node.add("engine_frequency", double_t, 1, "Max frequency of engine update rate [hz]", min=1, max=1000)
group_node.add("odom_pub_factor", int_t, 1, "Publish odom every [int] update of the engine", min=1, max=1000)
group_node.add("bio_ik_time", double_t, 1, "Timeout time for bioIK [s]", min=0, max=0.05)

exit(gen.generate(PACKAGE, "bitbots_throw", "throw_engine_params"))
